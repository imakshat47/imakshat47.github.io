name: Update GitHub Stats

on:
  schedule:
    - cron: "0 0 * * *"   # runs daily at midnight UTC
  workflow_dispatch:       # manual trigger

jobs:
  update-stats:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install requests
        run: pip install requests

      - name: Update stats
        run: |
          python3 << 'EOF'
          import requests, json, os, datetime

          token = os.getenv("GH_TOKEN")
          headers = {"Authorization": f"Bearer {token}"}

          # 1. Basic user stats
          user = requests.get("https://api.github.com/users/imakshat47", headers=headers).json()

          # 2. Repo stars
          repos = requests.get("https://api.github.com/users/imakshat47/repos?per_page=100", headers=headers).json()
          stars = sum(r.get("stargazers_count", 0) for r in repos)

          # 3. Commit count (GraphQL query)
          query = """
          {
            viewer {
              contributionsCollection {
                contributionCalendar {
                  totalContributions
                }
              }
            }
          }
          """
          r = requests.post("https://api.github.com/graphql", json={"query": query}, headers=headers).json()
          commits = r["data"]["viewer"]["contributionsCollection"]["contributionCalendar"]["totalContributions"]

          # 4. Save stats
          stats = {
              "public_repos": user.get("public_repos", 0),
              "stars": stars,
              "followers": user.get("followers", 0),
              "following": user.get("following", 0),
              "commits_this_year": commits,
              "location": user.get("location", ""),
              "company": user.get("company", ""),
              "blog": user.get("blog", ""),
              "bio": user.get("bio", ""),
              "last_updated": datetime.datetime.utcnow().isoformat() + "Z"
          }

          os.makedirs("api", exist_ok=True)
          with open("api/stats.json", "w") as f:
              json.dump(stats, f, indent=2)

          EOF

      - name: Commit & push changes
        run: |
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          git add api/stats.json
          git commit -m "ðŸ”„ Auto-update stats [skip ci]" || echo "No changes"
          git push
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
